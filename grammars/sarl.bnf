{
  parserClass='io.sarl.idea.language.parser.SarlParser'
  parserUtilClass='io.sarl.idea.language.parser.SarlParserUtil'

  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'

  psiClassPrefix='Sarl'
  psiImplClassSuffix='Impl'
  psiPackage='io.sarl.idea.language.psi'
  psiImplPackage='io.sarl.idea.language.psi.impl'

  elementTypeHolderClass='io.sarl.idea.language.psi.SarlTypes'
  elementTypeClass='io.sarl.idea.language.psi.SarlElementType'
  tokenTypeClass='io.sarl.idea.language.psi.SarlTokenType'

  psiImplUtilClass='io.sarl.idea.language.psi.impl.SarlPsiImplUtil'

  extends(".*expr")=expr

  tokens = [
    LB = '{'
    RB = '}'
    LP = '('
    RP = ')'
    LT = '<'
    GT = '>'
    COMMA = ','
    COLON = ':'
    SEMICOLON = ';'

    OP_EQ = '='
    OP_MINUS = '-'
    OP_PLUS = '+'
    OP_TIMES = '*'
    OP_DIV = '/'
    OP_MOD = '%'

    package = 'package'
    import = 'import'
    class = 'class'
    interface = 'interface'
    agent = 'agent'
    event = 'event'
    behavior = 'behavior'
    skill = 'skill'
    capacity = 'capacity'
    private = 'private'
    public = 'public'
    protected = 'protected'
    abstract = 'abstract'
    on = 'on'
    val = 'val'
    return = 'return'
    occurrence = 'occurrence'

    STRING = 'regexp:"[^"]*"'
    NUMBER = 'regexp:[0-9]+'

    IMPORT_PACKAGE = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*\.\*'
    SIMPLE_IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*'
    DOT_IDENTIFIER = 'regexp:[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*'
    LINE_COMMENT = 'regexp://.*'
    BLOCK_COMMENT = 'regexp:/\*.*?\*/'
    WHITE_SPACE = 'regexp:\s+'
  ]
}

sarl_file ::= package_declaration? import_declarations? type_declaration?

package_declaration ::= package DOT_IDENTIFIER
import_declarations ::= import_declaration+
import_declaration ::= import (IMPORT_PACKAGE | SIMPLE_IDENTIFIER | DOT_IDENTIFIER)

private type_declaration ::= class_declaration |
        interface_declaration |
        agent_declaration |
        event_declaration |
        behavior_declaration |
        skill_declaration |
        capacity_declaration

class_declaration ::= visibility_modifier? abstract? class type_identifier LB class_body? RB
interface_declaration ::= visibility_modifier? interface LB interface_body RB
agent_declaration ::= agent type_identifier LB agent_body? RB
event_declaration ::= event type_identifier LB event_body? RB
skill_declaration ::= skill type_identifier LB skill_body? RB
behavior_declaration ::= abstract? behavior type_identifier LB behavior_body? RB
capacity_declaration ::= capacity type_identifier LB capacity_body? RB
visibility_modifier ::= public | private | protected

type_identifier ::= (DOT_IDENTIFIER | SIMPLE_IDENTIFIER)

class_body ::= (member_declaration | constructor_declaration | function_declaration)+
event_body ::= (member_declaration | constructor_declaration | function_declaration)+
skill_body ::= (member_declaration | constructor_declaration | function_declaration)+
interface_body ::= (member_declaration | function_declaration)+
capacity_body ::= (member_declaration | function_declaration)+
agent_body ::= (uses_declaration | member_declaration | constructor_declaration | on_declaration | function_declaration)+
behavior_body ::= (uses_declaration | member_declaration | constructor_declaration | on_declaration | function_declaration)+

constructor_declaration ::= visibility_modifier? abstract? new LP parameter_declaration_list? RP function_body?
member_declaration ::= visibility_modifier? (val_declaration | var_declaration)
function_declaration ::= visibility_modifier? abstract? def SIMPLE_IDENTIFIER LP parameter_declaration_list? RP function_body?
on_declaration ::= on type_identifier function_body?
function_body ::= LB statement_list RB
parameter_declaration_list ::= parameter_declaration (COMMA parameter_declaration)*
parameter_declaration ::= SIMPLE_IDENTIFIER variable_type

uses_declaration ::= uses type_identifier (COMMA type_identifier)*
val_declaration ::= val SIMPLE_IDENTIFIER variable_type?
var_declaration ::= var SIMPLE_IDENTIFIER variable_type?
variable_type ::= COLON type_identifier

statement_list ::= statement*
statement ::=
    val_declaration_statement |
    var_declaration_statement |
    return_statement |
    function_call_statement
val_declaration_statement ::= val_declaration
var_declaration_statement ::= var_declaration
function_call_statement ::= function_call_expr
return_statement ::= return expr

expr ::=
    assign_expr |
    add_group |
    mul_group |
    unary_group |
    primary_group

private unary_group ::= unary_plus_expr | unary_min_expr
private mul_group ::= mul_expr | div_expr
private add_group ::= plus_expr | minus_expr
private primary_group ::= ref_expr | function_call_expr | lambda_expr | literal_expr | paren_expr | occurrence_expr

assign_expr ::= expr OP_EQ expr { rightAssociative=true }
unary_min_expr ::= OP_MINUS expr
unary_plus_expr ::= OP_PLUS expr
div_expr ::= expr OP_DIV expr
mul_expr ::= expr OP_TIMES expr
minus_expr ::= expr OP_MINUS expr
plus_expr ::= expr OP_PLUS expr
paren_expr ::= '(' expr ')'

lambda_expr ::= '[' (parameter_declaration_list '|')? function_body ']'

occurrence_expr ::= occurrence

function_call_expr ::= SIMPLE_IDENTIFIER LP parameter_list? RP
ref_expr ::= SIMPLE_IDENTIFIER
literal_expr ::= NUMBER | STRING

parameter_list ::= parameter (COMMA parameter)*
parameter ::= expr